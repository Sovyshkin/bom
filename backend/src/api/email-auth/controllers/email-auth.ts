'use strict';

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
const generateSimpleCode = () => {
  const patterns = [
    () => {
      const first = Math.floor(Math.random() * 9) + 1;
      const second = Math.floor(Math.random() * 9) + 1;
      return `${first}${first}${second}${second}`;
    },
    () => {
      const first = Math.floor(Math.random() * 9) + 1;
      const second = Math.floor(Math.random() * 9) + 1;
      return `${first}${second}${second}${first}`;
    },
    () => {
      const start = Math.floor(Math.random() * 6) + 1;
      return `${start}${start + 1}${start + 2}${start + 3}`;
    },
    () => {
      const pair1 = Math.floor(Math.random() * 9) + 1;
      let pair2 = Math.floor(Math.random() * 9) + 1;
      while (pair2 === pair1) {
        pair2 = Math.floor(Math.random() * 9) + 1;
      }
      return `${pair1}${pair1}${pair2}${pair2}`;
    }
  ];

  return patterns[Math.floor(Math.random() * patterns.length)]();
};

module.exports = {
  async sendCode(ctx) {
    const { email } = ctx.request.body;

    if (!email) {
      return ctx.badRequest('Email is required');
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return ctx.badRequest('Invalid email format');
    }

    try {
      let user = await strapi.query('plugin::users-permissions.user').findOne({
        where: { email: email.toLowerCase() }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      if (!user) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return ctx.send({ 
          success: false,
          userExists: false,
          message: 'User with this email does not exist'
        });
      }

      const verificationCode = generateSimpleCode();
      const codeExpires = new Date(Date.now() + 10 * 60 * 1000);

      await strapi.query('plugin::users-permissions.user').update({
        where: { id: user.id },
        data: {
          verificationCode: await bcrypt.hash(verificationCode, 10),
          codeExpires
        }
      });

      console.log('üìß Verification code for', email, ':', verificationCode);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ Beget SMTP
      try {
        await strapi.plugins['email'].services.email.send({
          to: email,
          from: process.env.SMTP_FROM_EMAIL,
          subject: '–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
          text: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${verificationCode}. –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.`,
          html: `
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="utf-8">
                <style>
                    body { 
                        font-family: Arial, sans-serif; 
                        line-height: 1.6; 
                        color: #333; 
                        max-width: 600px; 
                        margin: 0 auto; 
                        padding: 20px; 
                    }
                    .header { 
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        color: white; 
                        padding: 30px; 
                        text-align: center; 
                        border-radius: 10px 10px 0 0; 
                    }
                    .content { 
                        background: #f9f9f9; 
                        padding: 30px; 
                        border-radius: 0 0 10px 10px; 
                        border: 1px solid #ddd;
                    }
                    .code { 
                        background: #fff; 
                        padding: 20px; 
                        font-size: 32px; 
                        font-weight: bold; 
                        text-align: center; 
                        margin: 20px 0; 
                        border-radius: 8px; 
                        border: 2px dashed #667eea; 
                        letter-spacing: 8px;
                    }
                    .footer { 
                        text-align: center; 
                        margin-top: 30px; 
                        font-size: 12px; 
                        color: #666; 
                    }
                    .warning { 
                        background: #fff3cd; 
                        border: 1px solid #ffeaa7; 
                        padding: 15px; 
                        border-radius: 5px; 
                        margin: 20px 0; 
                        color: #856404;
                    }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h1>
                </div>
                <div class="content">
                    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
                    <p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
                    
                    <div class="code">${verificationCode}</div>
                    
                    <div class="warning">
                        ‚ö†Ô∏è <strong>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç</strong><br>
                        –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
                    </div>
                    
                    <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                </div>
                <div class="footer">
                    <p>¬© 2025 BOM. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                </div>
            </body>
            </html>
          `
        });
        
        console.log('‚úÖ Email sent successfully to:', email);

      } catch (emailError) {
        console.error('‚ùå Email sending error:', emailError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }

      ctx.send({ 
        success: true,
        userExists: true,
        message: 'Verification code sent to email',
        ...(process.env.NODE_ENV === 'development' && { 
          expires_in: '10 minutes'
        })
      });

    } catch (error) {
      console.error('Send code error:', error);
      ctx.internalServerError('Something went wrong');
    }
  },

  async verifyCode(ctx) {
    const { email, code } = ctx.request.body;

    if (!email || !code) {
      return ctx.badRequest('Email and code are required');
    }

    const codeRegex = /^\d{4}$/;
    if (!codeRegex.test(code)) {
      return ctx.badRequest('Code must be 4 digits');
    }

    try {
      const user = await strapi.query('plugin::users-permissions.user').findOne({
        where: { email: email.toLowerCase() }
      });

      if (!user) {
        return ctx.badRequest('User not found');
      }

      if (!user.codeExpires || new Date() > new Date(user.codeExpires)) {
        return ctx.badRequest('Verification code has expired');
      }

      if (!user.verificationCode) {
        return ctx.badRequest('No verification code found');
      }

      const isValid = await bcrypt.compare(code, user.verificationCode);
      
      if (!isValid) {
        return ctx.badRequest('Invalid verification code');
      }

      await strapi.query('plugin::users-permissions.user').update({
        where: { id: user.id },
        data: {
          verificationCode: null,
          codeExpires: null,
          isVerified: true
        }
      });

      const token = jwt.sign(
        {
          id: user.id,
          email: user.email
        },
        process.env.JWT_SECRET || 'fallback-secret',
        { expiresIn: '7d' }
      );

      ctx.send({
        success: true,
        jwt: token,
        refreshToken: token, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω –∫–∞–∫ refresh (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        user: {
          id: user.id,
          email: user.email,
          name: user.name,
          surname: user.surname
        },
        message: 'Successfully authenticated'
      });

    } catch (error) {
      console.error('Verify code error:', error);
      ctx.internalServerError('Something went wrong');
    }
  },

  async refreshToken(ctx) {
    const { refreshToken } = ctx.request.body;

    if (!refreshToken) {
      return ctx.badRequest('Refresh token is required');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh token
      const decoded = jwt.verify(refreshToken, process.env.JWT_SECRET || 'fallback-secret');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const user = await strapi.query('plugin::users-permissions.user').findOne({
        where: { id: decoded.id }
      });

      if (!user) {
        return ctx.unauthorized('User not found');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const newToken = jwt.sign(
        {
          id: user.id,
          email: user.email
        },
        process.env.JWT_SECRET || 'fallback-secret',
        { expiresIn: '7d' }
      );

      ctx.send({
        success: true,
        jwt: newToken,
        refreshToken: newToken, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω –∫–∞–∫ refresh (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        user: {
          id: user.id,
          email: user.email,
          name: user.name,
          surname: user.surname
        },
        message: 'Token refreshed successfully'
      });

    } catch (error) {
      console.error('Refresh token error:', error);
      
      if (error.name === 'TokenExpiredError') {
        return ctx.unauthorized('Refresh token expired');
      } else if (error.name === 'JsonWebTokenError') {
        return ctx.unauthorized('Invalid refresh token');
      }
      
      ctx.internalServerError('Something went wrong');
    }
  }
};